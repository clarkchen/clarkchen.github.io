<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>HEXO显示Latex公式</title>
    <url>/Hexo/HEXO%E6%98%BE%E7%A4%BALatex%E5%85%AC%E5%BC%8F/</url>
    <content><![CDATA[<p>2021年02月21日,我遇到的问题是在 typero里面顺利编辑的Latex 公式,但是在Hexo生成的页面里面不显示<br>需要安装一些插件和做一些配置,就ok了</p>
<a id="more"></a>
<h1 id="安装插件"><a href="#安装插件" class="headerlink" title="安装插件"></a>安装插件</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install hexo-math --save</span><br><span class="line">npm uninstall hexo-renderer-marked --save</span><br><span class="line">npm install hexo-renderer-kramed --save</span><br></pre></td></tr></table></figure>
<p>我再这里遇到的坑是  hexo-renderer-marked  无法下卸载，可以按如下流程处理：</p>
<ol>
<li>package.json 中去掉 hexo-renderer-marked </li>
<li>删除 node_modules </li>
<li>重新安装</li>
</ol>
<h1 id="配置修改"><a href="#配置修改" class="headerlink" title="配置修改"></a>配置修改</h1><p>位置在 <code>node_modules/_kramed@0.5.6@kramed/lib/rules/inline.js</code></p>
<p>需要修改 <code>escape</code> 和  <code>em</code></p>
<p>最终修改完整体显示为：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; ~&#x2F;blog&#x2F;node_modules\kramed\lib\rules\inline.js</span><br><span class="line"></span><br><span class="line">var inline &#x3D; &#123;</span><br><span class="line">  &#x2F;&#x2F;escape: &#x2F;^\\([\\&#96;*&#123;&#125;\[\]()#$+\-.!_&gt;])&#x2F;,      &#x2F;&#x2F; 注释掉的默认规则</span><br><span class="line">  escape: &#x2F;^\\([&#96;*\[\]()#$+\-.!_&gt;])&#x2F;,            &#x2F;&#x2F; 新增的规则</span><br><span class="line">  autolink: &#x2F;^&lt;([^ &gt;]+(@|:\&#x2F;)[^ &gt;]+)&gt;&#x2F;,</span><br><span class="line">  url: noop,</span><br><span class="line">  html: &#x2F;^&lt;!--[\s\S]*?--&gt;|^&lt;(\w+(?!:\&#x2F;|[^\w\s@]*@)\b)*?(?:&quot;[^&quot;]*&quot;|&#39;[^&#39;]*&#39;|[^&#39;&quot;&gt;])*?&gt;([\s\S]*?)?&lt;\&#x2F;\1&gt;|^&lt;(\w+(?!:\&#x2F;|[^\w\s@]*@)\b)(?:&quot;[^&quot;]*&quot;|&#39;[^&#39;]*&#39;|[^&#39;&quot;&gt;])*?&gt;&#x2F;,</span><br><span class="line">  link: &#x2F;^!?\[(inside)\]\(href\)&#x2F;,</span><br><span class="line">  reflink: &#x2F;^!?\[(inside)\]\s*\[([^\]]*)\]&#x2F;,</span><br><span class="line">  nolink: &#x2F;^!?\[((?:\[[^\]]*\]|[^\[\]])*)\]&#x2F;,</span><br><span class="line">  reffn: &#x2F;^!?\[\^(inside)\]&#x2F;,</span><br><span class="line">  strong: &#x2F;^__([\s\S]+?)__(?!_)|^\*\*([\s\S]+?)\*\*(?!\*)&#x2F;,</span><br><span class="line">  &#x2F;&#x2F;em: &#x2F;^\b_((?:__|[\s\S])+?)_\b|^\*((?:\*\*|[\s\S])+?)\*(?!\*)&#x2F;,    &#x2F;&#x2F; 注释掉的默认规则</span><br><span class="line">  em: &#x2F;^\*((?:\*\*|[\s\S])+?)\*(?!\*)&#x2F;,                               &#x2F;&#x2F; 新增的规则</span><br><span class="line">  code: &#x2F;^(&#96;+)\s*([\s\S]*?[^&#96;])\s*\1(?!&#96;)&#x2F;,</span><br><span class="line">  br: &#x2F;^ &#123;2,&#125;\n(?!\s*$)&#x2F;,</span><br><span class="line">  del: noop,</span><br><span class="line">  text: &#x2F;^[\s\S]+?(?&#x3D;[\\&lt;!\[_*&#96;$]| &#123;2,&#125;\n|$)&#x2F;,</span><br><span class="line">  math: &#x2F;^\$\$\s*([\s\S]*?[^\$])\s*\$\$(?!\$)&#x2F;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h1 id="主题修改"><a href="#主题修改" class="headerlink" title="主题修改"></a>主题修改</h1><h2 id="根目录config"><a href="#根目录config" class="headerlink" title="根目录config"></a>根目录config</h2><p>添加 math 支持</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># MathJax</span><br><span class="line">math:</span><br><span class="line">  engine: &#39;mathjax&#39;</span><br><span class="line">  mathjax:</span><br><span class="line">    src: https:&#x2F;&#x2F;cdnjs.cloudflare.com&#x2F;ajax&#x2F;libs&#x2F;mathjax&#x2F;2.7.4&#x2F;MathJax.js?config&#x3D;TeX-MML-AM_CHTML   </span><br></pre></td></tr></table></figure>
<h2 id="主题config"><a href="#主题config" class="headerlink" title="主题config"></a>主题config</h2><p>启用 mathjax</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mathjax:</span><br><span class="line">  enable: true # 默认为False</span><br><span class="line">  # See: https:&#x2F;&#x2F;mhchem.github.io&#x2F;MathJax-mhchem&#x2F;</span><br><span class="line">  mhchem: false</span><br></pre></td></tr></table></figure>
<h1 id="文章标题"><a href="#文章标题" class="headerlink" title="文章标题"></a>文章标题</h1><p>还需要在文章的开始的Hexo配置里打开mathjax开关，如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">layout: post</span><br><span class="line">title: HEXO显示Latex公式</span><br><span class="line">date: 2021-02-21 12:40:58</span><br><span class="line">tags: hexo</span><br><span class="line">mathjax: true </span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h1 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h1><h2 id="添加latex"><a href="#添加latex" class="headerlink" title="添加latex"></a>添加latex</h2><p>在文章中的某个位置加上如下 latex 代码</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$$</span><br><span class="line">A &#x3D; \begin&#123;bmatrix&#125;</span><br><span class="line">        a_&#123;11&#125;    &amp; a_&#123;12&#125;    &amp; ...    &amp; a_&#123;1n&#125;\\</span><br><span class="line">        a_&#123;21&#125;    &amp; a_&#123;22&#125;    &amp; ...    &amp; a_&#123;2n&#125;\\</span><br><span class="line">        a_&#123;31&#125;    &amp; a_&#123;22&#125;    &amp; ...    &amp; a_&#123;3n&#125;\\</span><br><span class="line">        \vdots    &amp; \vdots    &amp; \ddots &amp; \vdots\\</span><br><span class="line">        a_&#123;n1&#125;    &amp; a_&#123;n2&#125;    &amp; ... &amp; a_&#123;nn&#125;\\</span><br><span class="line">    \end&#123;bmatrix&#125; , b &#x3D; \begin&#123;bmatrix&#125;</span><br><span class="line">        b_&#123;1&#125;  \\</span><br><span class="line">        b_&#123;2&#125;  \\</span><br><span class="line">        b_&#123;3&#125;  \\</span><br><span class="line">        \vdots \\</span><br><span class="line">        b_&#123;n&#125;  \\</span><br><span class="line">    \end&#123;bmatrix&#125;</span><br><span class="line">$$</span><br></pre></td></tr></table></figure>
<p>会居中显示公式</p>
<script type="math/tex; mode=display">
A = \begin{bmatrix}
        a_{11}    & a_{12}    & ...    & a_{1n}\\
        a_{21}    & a_{22}    & ...    & a_{2n}\\
        a_{31}    & a_{22}    & ...    & a_{3n}\\
        \vdots    & \vdots    & \ddots & \vdots\\
        a_{n1}    & a_{n2}    & ... & a_{nn}\\
    \end{bmatrix} , b = \begin{bmatrix}
        b_{1}  \\
        b_{2}  \\
        b_{3}  \\
        \vdots \\
        b_{n}  \\
    \end{bmatrix}</script><h2 id="重新生成网页"><a href="#重新生成网页" class="headerlink" title="重新生成网页"></a>重新生成网页</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo s</span><br></pre></td></tr></table></figure>
<h1 id="参考："><a href="#参考：" class="headerlink" title="参考："></a>参考：</h1><p><a href="https://cps.ninja/2019/03/16/hexo-with-latex/">让 Hexo 搭建的博客支持 LaTeX</a><br><a href="https://dragon-liu.github.io/2019/04/26/blog6/">hexo next主题解决无法显示Latex数学公式———系列第六篇</a></p>
]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo中插入mermaid diagrams</title>
    <url>/Hexo/Hexo%E4%B8%AD%E6%8F%92%E5%85%A5mermaid-diagrams/</url>
    <content><![CDATA[<h1 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h1><ul>
<li>markdown 里面绘制的 mermaid 图片在 hexo里无法显示</li>
<li>希望发布成博客的时候, 能和本地一样生成图片</li>
</ul>
<h1 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h1><p>技术方案选取,  <a href="https://github.com/webappdevelp/hexo-filter-mermaid-diagrams">hexo-filter-mermaid-diagrams</a>, 下面将其操作过程进行翻译.</p>
<a id="more"></a>
<h2 id="软件安装"><a href="#软件安装" class="headerlink" title="软件安装"></a>软件安装</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 更新在本地 package.json 中</span></span><br><span class="line">npm install hexo-filter-mermaid-diagrams --save</span><br></pre></td></tr></table></figure>
<h2 id="配置文件修改"><a href="#配置文件修改" class="headerlink" title="配置文件修改"></a>配置文件修改</h2><h3 id="项目配置文件"><a href="#项目配置文件" class="headerlink" title="项目配置文件"></a>项目配置文件</h3><p>我的实践过程中, 其实应该在 theme 的配置中设置,但是官方文档这么推荐的, 我们可以先这么操作</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># mermaid chart</span><br><span class="line">mermaid: ## mermaid url https:&#x2F;&#x2F;github.com&#x2F;knsv&#x2F;mermaid</span><br><span class="line">  enable: true  # default true</span><br><span class="line">  version: &quot;7.1.2&quot; # default v7.1.2</span><br><span class="line">  options:  # find more api options from https:&#x2F;&#x2F;github.com&#x2F;knsv&#x2F;mermaid&#x2F;blob&#x2F;master&#x2F;src&#x2F;mermaidAPI.js</span><br><span class="line">    #startOnload: true  &#x2F;&#x2F; default true</span><br></pre></td></tr></table></figure>
<h3 id="主题配置文件"><a href="#主题配置文件" class="headerlink" title="主题配置文件"></a>主题配置文件</h3><p>注意官方文档这段暂时没写, 如果是使用 主题为 Next的朋友们请参考, 另外版本可以设置为新的 8.8.4</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># .&#x2F;theme&#x2F;next&#x2F;_config.yml</span><br><span class="line"># Mermaid tag</span><br><span class="line">mermaid:</span><br><span class="line">  version: 8.8.4 </span><br><span class="line">  enable: true # next theme 默认为 True</span><br><span class="line">  # Available themes: default | dark | forest | neutral</span><br><span class="line">  theme: forest</span><br></pre></td></tr></table></figure>
<h2 id="js文件修改"><a href="#js文件修改" class="headerlink" title="js文件修改"></a>js文件修改</h2><ol>
<li>js位置  themes/next/layout/_partials/footer.swig`</li>
<li><p>不同主题的根据footer的格式不同，例如<code>after_footer.pug</code> , <code>after-footer.ejs</code> ,<code>footer.swig</code>等。</p>
</li>
<li><p>这里也需要注意, 这里官方文档上存在一点语法问题,如果不会JS的朋友,可以按照本文中的代码粘贴</p>
</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&#123;% <span class="keyword">if</span> theme.mermaid.enable %&#125;</span><br><span class="line">  &lt;script src=<span class="string">&#x27;https://unpkg.com/mermaid@&#123;&#123; theme.mermaid.version &#125;&#125;/dist/mermaid.min.js&#x27;</span>&gt;&lt;/script&gt;</span><br><span class="line">  &lt;script&gt;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">window</span>.mermaid) &#123;</span><br><span class="line">      mermaid.initialize(<span class="built_in">JSON</span>.stringify(&#123;&#123; theme.mermaid.options &#125;&#125;));</span><br><span class="line">    &#125;</span><br><span class="line">  &lt;/script&gt;</span><br><span class="line">&#123;% endif %&#125;</span><br></pre></td></tr></table></figure>
<h2 id="bug-fix"><a href="#bug-fix" class="headerlink" title="bug fix"></a>bug fix</h2><p>需要注意的是,截止2021年01月09日, 今日官方readme有两处需要调整的地方, 已经提交 <a href="https://github.com/webappdevelp/hexo-filter-mermaid-diagrams/pull/13">MR</a></p>
<h1 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h1><h2 id="流程图"><a href="#流程图" class="headerlink" title="流程图"></a>流程图</h2><pre class="mermaid">graph LR
A[Hard edge] -->B(Round edge)
    B --> C{Decision}
    C -->|One| D[Result one]
    C -->|Two| E[Result two]</pre>



<h2 id="时序图"><a href="#时序图" class="headerlink" title="时序图"></a>时序图</h2><h3 id="逻辑分块时序图"><a href="#逻辑分块时序图" class="headerlink" title="逻辑分块时序图"></a>逻辑分块时序图</h3><pre class="mermaid">%% Example of sequence diagram
  sequenceDiagram
    Alice->>Bob: Hello Bob, how are you?
    alt is sick
    Bob->>Alice: Not so good :(
    else is well
    Bob->>Alice: Feeling fresh like a daisy
    end
    opt Extra response
    Bob->>Alice: Thanks for asking
    end</pre>

<h3 id="循环时序图"><a href="#循环时序图" class="headerlink" title="循环时序图"></a>循环时序图</h3><pre class="mermaid">sequenceDiagram
Alice->>John: Hello John, how are you?
loop Healthcheck
    John->>John: Fight against hypochondria
end
Note right of John: Rational thoughts!
John-->>Alice: Great!
John->>Bob: How about you?
Bob-->>John: Jolly good!</pre>


<h2 id="类图"><a href="#类图" class="headerlink" title="类图"></a>类图</h2><pre class="mermaid">classDiagram
      Animal <|-- Duck
      Animal <|-- Fish
      Animal <|-- Zebra
      Animal : +int age
      Animal : +String gender
      Animal: +isMammal()
      Animal: +mate()
      class Duck{
          +String beakColor
          +swim()
          +quack()
      }
      class Fish{
          -int sizeInFeet
          -canEat()
      }
      class Zebra{
          +bool is_wild
          +run()
      }</pre>

<h2 id="状态图"><a href="#状态图" class="headerlink" title="状态图"></a>状态图</h2><pre class="mermaid">stateDiagram
    [*] --> Still
    Still --> [*]

    Still --> Moving
    Moving --> Still
    Moving --> Crash
    Crash --> [*]</pre>
## 饼图
<pre class="mermaid">pie
    title Pie Chart
    "Dogs" : 386
    "Cats" : 85
    "Rats" : 150</pre>

<h2 id="ER图"><a href="#ER图" class="headerlink" title="ER图"></a>ER图</h2><pre class="mermaid">erDiagram
    CAR ||--o{ NAMED-DRIVER : allows
    CAR {
        string registrationNumber
        string make
        string model
    }
    PERSON ||--o{ NAMED-DRIVER : is
    PERSON {
        string firstName
        string lastName
        int age
    }</pre>

<h2 id="刚特图"><a href="#刚特图" class="headerlink" title="刚特图"></a>刚特图</h2><pre class="mermaid">gantt
        dateFormat  YYYY-MM-DD
        title Adding GANTT diagram functionality to mermaid

        section A section
        Completed task            :done,    des1, 2014-01-06,2014-01-08
        Active task               :active,  des2, 2014-01-09, 3d
        Future task               :         des3, after des2, 5d
        Future task2               :         des4, after des3, 5d

        section Critical tasks
        Completed task in the critical line :crit, done, 2014-01-06,24h
        Implement parser and jison          :crit, done, after des1, 2d
        Create tests for parser             :crit, active, 3d
        Future task in critical line        :crit, 5d
        Create tests for renderer           :2d
        Add to mermaid                      :1d

        section Documentation
        Describe gantt syntax               :active, a1, after des1, 3d
        Add gantt diagram to demo page      :after a1  , 20h
        Add another diagram to demo page    :doc1, after a1  , 48h

        section Last section
        Describe gantt syntax               :after doc1, 3d
        Add gantt diagram to demo page      : 20h
        Add another diagram to demo page    : 48h</pre>


<p>参考:</p>
<p><a href="https://mermaid-js.github.io/mermaid/#/">mermaid-js repo</a></p>
<p><a href="https://github.com/webappdevelp/hexo-filter-mermaid-diagrams">hexo-filter-mermaid-diagrams</a></p>
]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo启动教程</title>
    <url>/Hexo/Hexo%E5%90%AF%E5%8A%A8%E6%95%99%E7%A8%8B/</url>
    <content><![CDATA[<h2 id="首次启动"><a href="#首次启动" class="headerlink" title="首次启动"></a>首次启动</h2><ul>
<li><p>首先把 项目 clone 到本地</p>
</li>
<li><p>安装nodejs，建议你直接官网下载最新的编译器，<a href="https://nodejs.org/zh-cn/">NodeJS</a></p>
</li>
<li><p>检查下版本， 以下为最新版本</p>
<a id="more"></a>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ node --version</span><br><span class="line">v12.14.1+</span><br><span class="line"></span><br><span class="line">$ npm -v          </span><br><span class="line">6.13.4+</span><br></pre></td></tr></table></figure>
<ul>
<li>安装 hexo , <a href="https://hexo.io/zh-cn/">官网</a><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 进入项目目录</span><br><span class="line">cd blog_dir </span><br><span class="line"></span><br><span class="line">$ npm install hexo-cli -g</span><br><span class="line"></span><br><span class="line"># 初始化项目</span><br><span class="line">$ hexo-init</span><br><span class="line"></span><br><span class="line"># 如果出错要卸载</span><br><span class="line">$ npm uninstall hexo-cli -g</span><br><span class="line"></span><br><span class="line"># 安装剩余包</span><br><span class="line">$ npm install</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="常见操作"><a href="#常见操作" class="headerlink" title="常见操作"></a>常见操作</h2><h3 id="1-写一篇新的"><a href="#1-写一篇新的" class="headerlink" title="1. 写一篇新的"></a>1. 写一篇新的</h3><p><a href="https://hexo.io/zh-cn/docs/writing">官方教程</a>，在命令行执行</p>
<ul>
<li><code>hexo new post 炒菜-技术教程</code></li>
</ul>
<p>如果你不是一气呵成的话，可以先新建一片草稿（不会在页面上显示）</p>
<ul>
<li><code>hexo new draft 炒菜-技术教程-草稿版</code></li>
</ul>
<h3 id="2-添加一个分类"><a href="#2-添加一个分类" class="headerlink" title="2. 添加一个分类"></a>2. 添加一个分类</h3><p>在标题部分添加 categories 和 tags</p>
<p>入下图所示</p>
<img src="/Hexo/Hexo%E5%90%AF%E5%8A%A8%E6%95%99%E7%A8%8B/01_markdown.jpg" class="" title="流程图">
<p>则会在对应的页面上产生效果，分别显示为分类和标签</p>
<img src="/Hexo/Hexo%E5%90%AF%E5%8A%A8%E6%95%99%E7%A8%8B/02_web.jpg" class="" title="流程图">
<h2 id="上传资源"><a href="#上传资源" class="headerlink" title="上传资源"></a>上传资源</h2><ol>
<li>通过步骤1会在 _posts 下面建立对应的文件夹, 比如 建立 “博客.md”, 则会出现 “博客” 对一个的文件夹</li>
<li>将资源放在新建的对应的资源文件夹中, 例如 A.jpg，具体关系如下图所示</li>
</ol>
<img src="/Hexo/Hexo%E5%90%AF%E5%8A%A8%E6%95%99%E7%A8%8B/3-show.jpg" class="" title="流程图">
<h3 id="上传附件"><a href="#上传附件" class="headerlink" title="上传附件"></a>上传附件</h3><ol>
<li>使用资源的时候，参考，<a href="https://hexo.io/zh-cn/docs/asset-folders.html">语法</a></li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;% asset_path slug %&#125;</span><br><span class="line"></span><br><span class="line"># 图片</span><br><span class="line">&#123;% asset_img slug [title] %&#125;</span><br><span class="line"></span><br><span class="line"># 附件</span><br><span class="line">&#123;% asset_link slug [title] %&#125; </span><br><span class="line"># 例如 &#123;% asset_link 2021-01-01-12-22-08.zip  download%&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="上传图片"><a href="#上传图片" class="headerlink" title="上传图片"></a>上传图片</h3><p>图片是附件的一种, 通过上面的 asset_img 可以完成图片展示, 但是不利于写作</p>
<h4 id="安装工具"><a href="#安装工具" class="headerlink" title="安装工具"></a>安装工具</h4><ul>
<li>安装图片修改器 <a href="https://github.com/cocowool/hexo-image-link">hexo-image-link</a>, 会将MarkDown格式的图片链接修改为 assets 类型</li>
</ul>
<h4 id="执行转化"><a href="#执行转化" class="headerlink" title="执行转化"></a>执行转化</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 清除资源</span><br><span class="line">hexo clean</span><br><span class="line"># 重新加载图片</span><br><span class="line">hexo g</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
  </entry>
  <entry>
    <title>利用Hexo搭建Gitbook</title>
    <url>/Hexo/%E5%88%A9%E7%94%A8Hexo%E6%90%AD%E5%BB%BAGitbook/</url>
    <content><![CDATA[<p>大概原理是我们可以将一个github repo 里面的内容隐射到一个域名下</p>
<p>例如<br>域名：clarkchen.github.io<br>对应的git 项目是<br>静态repo：<a href="https://github.com/clarkchen/clarkchen.github.io">https://github.com/clarkchen/clarkchen.github.io</a></p>
<p>但是这个项目里面是纯的HTML文件，而我们日常书写的习惯是，通过Markdown来写作，所以需要找一个软件能够将我们写的Markdown的内容，自动生成 html并且上传到 对应的 <strong>静态repo</strong> 的项目距下面，我们选择的工具是 Hexo。</p>
<h1 id="Hexo-Deploy"><a href="#Hexo-Deploy" class="headerlink" title="Hexo Deploy"></a>Hexo Deploy</h1><p><a href="https://hexo.io/zh-cn/docs/one-command-deployment.html">https://hexo.io/zh-cn/docs/one-command-deployment.html</a></p>
<p>例如我的配置是<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># Deployment</span><br><span class="line">## Docs: https:&#x2F;&#x2F;hexo.io&#x2F;docs&#x2F;deployment.html</span><br><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repo: git@github.com:clarkchen&#x2F;clarkchen.github.io.git</span><br><span class="line">  branch: master</span><br><span class="line">  name: clarkchen</span><br><span class="line">  email: cxfhacker@gmail.com</span><br><span class="line">  ignore_hidden: false # default is true</span><br><span class="line">  ignore_pattern: regexp  # whatever file that matches the regexp will be ignored when deploying</span><br><span class="line"></span><br></pre></td></tr></table></figure></p>
<p>做好这个配置之后，我们可以将markdown 对应的文件和 assests 传到另外一个 repo 上，然后编辑完成之后，通过<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo deploy </span><br></pre></td></tr></table></figure><br>来完成自动的文件上传和部署</p>
]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Gitbok</tag>
      </tags>
  </entry>
  <entry>
    <title>爷爷追忆</title>
    <url>/Life/%E7%88%B7%E7%88%B7%E8%BF%BD%E5%BF%86/</url>
    <content><![CDATA[<h1 id="爷爷去世"><a href="#爷爷去世" class="headerlink" title="爷爷去世"></a>爷爷去世</h1><p>逝者爷爷陈连，讲述者奶奶李芝粉，笔者孙子陈曦</p>
<p>2013年6月25日，爷爷去世了，享年85岁，是一位非常慈祥的，脾气古怪的老人。</p>
<a id="more"></a>
<p>走的时候儿女都在身边，连续三天每天睡十多个小时，神志不是很清醒，睡梦中就去了，我最后看到的时候很慈祥很安宁。</p>
<p>办葬礼的时候，坚强奶奶不让大家哭，葬礼办的利索干净，就像两位老人一直的生活习惯一样。</p>
<p>守灵的时候天气很神奇，连阴七天，落葬之后开始下雨，复七之后又一场雨，旁人们说是好兆头，却也高兴不起来，只愿逝者安息，存者常健。</p>
<p>出殡的时候，我拿着爷爷的遗像，坐在灵车上，看着东方的鱼肚白，不知道为什么感觉很轻松很愉快，一个至亲的人生画上了句号有时候并不一定是无比的悲伤，也可能是一片空白的自然，又一次面对了死亡。</p>
<p>走在半道上，车厢里突然开始冒出浓烟，只能停下来检修，本来是很恐怖的事情，但是总觉的像是上天开的一个玩笑，可能是想让爷爷驻足再看一下故乡的土地，我站在路边绕了一圈对着遗像介绍一下周围的景色，十几分钟的修理，继续上路。</p>
<p>爷爷的墓地离他生活了大半辈子的草原不远，背靠山前绕水，远眺草原，我坐在墓旁的时候觉的很舒服，应该是个好归宿。</p>
<p>每个老人总会有一些遗物，爷爷自己放着一个箱子，父辈，小辈们从来都不敢碰。下葬完那天晚上，大家围坐一圈，奶奶打开箱子，大家都想看看爷爷珍藏了这么多年的宝贝是什么?钱，金银，古董？</p>
<p>就像小学课本一样，意料之外，情理之中。和奶奶的结婚照，儿女们的照片，全家人的合影，小辈们的照片，我年轻时候的裸照，姑父送的扇子，老爸的入党申请书，自己的工作证，所有人的生辰八字…</p>
<p>大家传阅逗乐，仿佛又回到了各自从前的日子，上学的时候，工作的时候，结婚生子的时候。已经很久没有一大家子人坐在一起谈天说地，回忆往昔，昏黄的灯光照着遗像，都明白了这位逝去的老者才是联系大家的纽带。</p>
<p>完事儿之后大人们开始讨论遗产和奶奶的赡养，很不应景却又很现实，小辈们都出来了。</p>
<p>这两天陪奶奶，顺便问了一下爷爷的事情，往事如烟，平淡真实，写成博客但愿逝者永存。</p>
<h1 id="爷爷过去"><a href="#爷爷过去" class="headerlink" title="爷爷过去"></a>爷爷过去</h1><p>爷爷叫陈连，1931年生于山西代县陈家堡，16岁之前都是在里面呆着的，见过日本鬼子，国民党，47年去了内蒙谋生活。当时爷爷兄弟三人姐妹两人，到了我这一辈已经不太认识其他支上的人了，在葬礼上才认识了很多亲戚。</p>
<p>爷爷在包头一呆就是八年，在一家皮毛外贸公司当学徒，给掌柜们端茶送水。和走西口里的剧情很像，外贸公司的驼队从山西到包头，带上粮食辣椒其他货物去边境找蒙人贸易，换回羊皮绒毛回来再卖，一年几趟下来就是大买卖了。</p>
<p>后来运气不错，55年的时候，爷爷24岁，进了食品公司，然后被分配到了乌拉特中旗。那个缺粮食的时候，逃离城市反而能活的更好，起码那里肯定有粮食。这个时候插一句，可能现在无法想象，爷爷那个时候有连着九年没回山西老家，工作之后实际上也没回过几次家，交通不便，工作繁忙的缘故。</p>
<p>在中旗呆了3年之后，全家搬到了巴音哈太公社，一个呆了十八年的地方。爷爷在牧区从二十岁呆到了四十岁，日复一日的收购供销，几乎是整个青春留在了牧区。奶奶说起来，爷爷有点略自私，有吃的自己先吃饱，奶奶和其他所有的孩子都是自己解决。好像很毁三观的样子，好在后后来子女都很有要强，日子过得不错。</p>
<p>在巴音哈太日子过的都很苦，经历过60年代的大饥荒，全家人苦没少受，但最后挺过来了；文化大革命的时候爷爷被人朝脑袋上打了一拳，逃跑到呼市，然后全家四分五裂，奶奶在内蒙带着两孩子在公社东躲西藏，爷爷领着其他孩子逃回老家，但还好是边境小地方，两派对干了三四个月也就没事儿了。</p>
<p>74年，爷爷四十多岁的时候调回了中旗。孩子们也都大了，温饱算是不愁了，老爸和三姑上学 ，大爹去当兵，大姑二姑下乡去了，这个时候的主旋律就是父辈们的成长。爷爷这个时候感觉就是换个地方过日子，一切照旧，虽然还是家里的主心骨，但除了工作家里事很少管，奶奶就比较辛苦，是这段的主角。</p>
<p>奶奶从牧区就开始扣土胚，到中旗继续，一千胚三块九，一夏天能扣二三十万胚，老爸和三姑当时也帮忙，一早起来就扣，上玩完学回来继续扣，夜以继日的。奶奶经常走个八十一百多里地去看儿女们，八十里啊，直接走过去，带点吃的穿的，到一个地方住一晚继续到下一个地方。我听了简直汗颜无比，自己受那点苦那点累，被奶奶秒杀。</p>
<p>中旗一待就是二十多年，等到所有子女都成家立业了，日子就过的就比较舒服了。奶奶看大了所有的孩子，又开始看孩子们的孩子，以至于哥哥姐姐们记忆很统一，小时候一根绳子绑在床头，随便爬，随便嚎，但感觉那个时候还是蛮爽的，兄弟姐妹们都在一起长大，挨个去串门，总能找到个一起玩儿的。老爸老妈是中旗早年的邻居，我也出生在中旗，小时候经常被放到爷爷奶奶那里，接下来这段主要是我的记忆。</p>
<p>爷爷从食品公司退休之后，去大爹门市部里帮忙，好像总是能带些糖和小吃回来（感谢大爹），放在一个装满大豆的罐子里，然后我总是偷吃。小时候关于吃的记忆就是爷爷的罐子，还有姥爷的馅饼。</p>
<p>爷爷爱喝茶，他用大茶壶，碰巧还有个小茶壶，为了用上这个小茶壶，搞得我不得不经常喝茶，被搞得很老气横秋的样子。到现在对于茶分类的第一印象还停留在小时候，咸死人的砖茶和甜甜小叶茶（非砖茶加糖）。</p>
<p>对于乌拉特中旗那段我的记忆里还有方便面，玩具积木，算盘，扑克，黄色的柿子，玉米，放炮，大爹的门市部，大姑家的有线电视，三姑家的哪吒闹海吃的和电视，二姑家的相机和强强（小时候太调皮了），姥爷的馅饼，压岁钱，奶奶打麻将，新白娘子，回中旗路上连续十几个上下坡。。。</p>
<p>97年，爷爷奶奶六十出头的时候，我家搬新家，接爷爷奶奶来临河住，一晃十六年。这一段就是养老的节奏了。奶奶很会打牌，很快认识了好多我妈的好麻友，爷爷每天看电视，出门转悠，好像很寂寞的样子。</p>
<p>老爸经常出去喝酒，老妈也经常去打麻将，我一到周末就被送到爷爷奶奶那里，不过我也挺高兴，看小说都能被说用功，还劝我学累了去玩玩电脑吧，他俩看电视的时候还总是拉着我生怕我吃亏，最后真是愧疚的不行了才开始学习的。</p>
<p>爷爷奶奶晚饭铁定中午的剩饭加稀粥再加无限量补饼和馒头，真是无力吐槽，所以想吃新饭必须把午饭吃光，有时候也在想可能我的胖不是因为饮料喝多的缘故。</p>
<p>爷爷刚来的时候喜欢下棋，门外有人下棋肯定跑出去，虽然是也是菜鸟，但虐我轻松加愉快。最高兴的事情是有人来看他，总喜欢在家里盯着大门口，最不爽的事情是被忽略，尤其是奶奶讲故事的时候。</p>
<p>考上大学是一个分水岭，基本上一年只能看爷爷几面。再后来爷爷脑梗被救活以后，神志不是很清醒，但牙口很好八十四没掉一颗牙，胃口一直很好。每次回来陪爷爷，他就只会说那么几句话，可是陪他一下午之后他就总是笑了，像个小孩一样。</p>
<p>爷爷最后三年，奶奶一直在照顾，一年累的瘦了四十斤，三姑隔三差五都要买点菜，老爸老妈周末过去吃饭打牌，日子再苦都能过，就是这么拧巴的活着。</p>
<p>其实爷爷奶奶的一生可能在我们看来真是平淡的不能在平淡了。怎么过都是一辈子，但是那个年代走过来的人，本身就有浓烈的时代的烙印，没有啥名留青史的功名，能平安走完一生，儿女个个争气已属不易。文字可能看起来不痛不痒的，那是因为奶奶说这些事情的时候太淡定了，吃过大苦的人才能笑谈这些苦逼经历，我帮忙记下来，望后人铭记。</p>
<h2 id="后来"><a href="#后来" class="headerlink" title="后来"></a>后来</h2><p>2020年04月27日<br>知道奶奶也去世了，新冠疫情没回去，遥祭</p>
]]></content>
      <categories>
        <category>生活</category>
      </categories>
      <tags>
        <tag>历史</tag>
        <tag>生活</tag>
      </tags>
  </entry>
  <entry>
    <title>解析借贷类产品套路</title>
    <url>/%E9%87%91%E8%9E%8D/%E8%A7%A3%E6%9E%90%E5%80%9F%E8%B4%B7%E7%B1%BB%E4%BA%A7%E5%93%81%E5%A5%97%E8%B7%AF/</url>
    <content><![CDATA[<p>在面对互联网金融领域的各种借贷产品,例如装修贷款,信用卡借贷,借呗花呗,京东白条,一定要注意他们的利率和还款模式<br>否则很容被套路<br><a id="more"></a></p>
<h1 id="你被银行的利息套路了"><a href="#你被银行的利息套路了" class="headerlink" title="你被银行的利息套路了"></a>你被银行的利息套路了</h1><p>我们日常面对的信用卡账单分期和消费贷，往往会给大家一份非常高的授信额度，比如10w，然后配着一个非常低的利率，比如日息万分之二。</p>
<p>比如这是我在招行申请的信用卡1万元的分期界面。</p>
<img src="/%E9%87%91%E8%9E%8D/%E8%A7%A3%E6%9E%90%E5%80%9F%E8%B4%B7%E7%B1%BB%E4%BA%A7%E5%93%81%E5%A5%97%E8%B7%AF/Picture1-small.jpg" class="" title="Picture1-small">
<p>通过进一步分析，每个月的还款</p>
<img src="/%E9%87%91%E8%9E%8D/%E8%A7%A3%E6%9E%90%E5%80%9F%E8%B4%B7%E7%B1%BB%E4%BA%A7%E5%93%81%E5%A5%97%E8%B7%AF/2.jpg" class="" width="2">
<p>可知年化利率，6.34%，月利率千分之5，日利率 万1，给人感觉真是良心产品。</p>
<p>而实际上如果你借了这笔钱，那么就是跳进了一个利率陷阱里面，这款产品的宣传的利率为6.34%，而实际利率达到了，11.7%。</p>
<p>因为你的欠款不断在减少，而的利息却一直不变。</p>
<h1 id="为什么利息要变？"><a href="#为什么利息要变？" class="headerlink" title="为什么利息要变？"></a>为什么利息要变？</h1><p>我们来看一下利息的定义：</p>
<blockquote>
<p>利息=本金×<a href="https://baike.baidu.com/item/利率">利率</a>×存期</p>
</blockquote>
<p>在上面的例子中，用户每个月都要还款，也就是资金额是随着时间不断下降的，而银行却要我们每月按照全额借款的利息来支付。站在借款人的角度上，我们多付了利息，实际上是按照更高的利率在借贷。</p>
<h2 id="IRR-amp-APR"><a href="#IRR-amp-APR" class="headerlink" title="IRR &amp; APR"></a>IRR &amp; APR</h2><p>这个更高的利率我们称为<strong>实际利率</strong>,<a href="https://baike.baidu.com/item/实际利率" title="实际利率">IRR</a>，简单来说就是，我们基于用户每个月的借款回款情况，综合得出的真实利率，计算方式利用 Excel表格中的<a href="https://support.microsoft.com/zh-cn/office/irr-%E5%87%BD%E6%95%B0-64925eaa-9988-495b-b290-3ad0c163c1bc" title="Excel IRR函数">IRR</a>公式计算。</p>
<p>而这些产品在对外宣传时候的利率，其实是<strong>名义利率</strong>,<a href="https://baike.baidu.com/item/名义利率" title="名义利率">APR</a>，其定义是指一年内对贷款计息时，对外给出的年利率，年利率 = 息费之和 / 借款本金。</p>
<p>在不同的还款方式下，两种利率计算方式是不一样的，甚至会出现名义利率远低于实际利率的情况。</p>
<h1 id="有哪些还款方式？"><a href="#有哪些还款方式？" class="headerlink" title="有哪些还款方式？"></a>有哪些还款方式？</h1><p>我们在之后的各种还款方式的概念中，都会配置一个例子，借本金12000元，名义利率为10%，并计算实际支付利息金额。</p>
<h2 id="随借随还"><a href="#随借随还" class="headerlink" title="随借随还"></a>随借随还</h2><p>随借随还是指客户在获得授信额度后可以随时来支取，借出后就开始计算利息；借出后可以随时还款，还款后额度会进行恢复，一般用于银行的大额消费贷、借呗等。随借随还的贷款计算公式如下：</p>
<p><strong>总还款利息 = 贷款本金 * 日利率 * 贷款天数</strong></p>
<p>下面举个例子进行说明：</p>
<blockquote>
<p>随借随还：借款12000，借款期限12个月，月利率（ 10% / 12 ）<br>总还利息 = 12000 <em> ( 10% / 365 ) </em> 365 = 1200</p>
</blockquote>
<h2 id="先息后本"><a href="#先息后本" class="headerlink" title="先息后本"></a>先息后本</h2><p>先息后本是指每月支付利息，到期后归还本金，这种还款方式更适合现金流压力较大，而一定时间后才会有一笔钱进账的个人或企业使用。先息后本的计算公式如下：</p>
<p><strong>每月还款利息 = 贷款本金 * 月利率</strong></p>
<p><strong>总还款利率 = 贷款本金 * 月利率 * 还款月数</strong></p>
<p>下面举个例子进行说明：</p>
<blockquote>
<p>先息后本：借款12000，借款期限12个月，月利率（ 10% / 12 ）<br>每个月应还利息 = 12000 <em> 10% / 12 = 100<br>总还利息 = 12000 </em> 10% = 1200</p>
</blockquote>
<h2 id="等本等息"><a href="#等本等息" class="headerlink" title="等本等息"></a>等本等息</h2><p>等本等息是指每个月偿还的本金相等，利息也相等，一般用于银行卡现金分期或者账单分期。等本等息的贷款计算公式如下：</p>
<p><strong>每月还款本息 = （贷款本金 / 还款月数）+ 贷款本金 * 月利率</strong></p>
<p><strong>总还款利息 = 贷款本金 * 月利率 * 还款月数</strong></p>
<p>下面举个例子进行说明：</p>
<blockquote>
<p>等本等息：借款12000，借款期限12个月，月利率（ 10% / 12 ）<br>每个月应还本金 = 12000 / 12 = 1000<br>每个月应还利息 = 12000 <em> 10% / 12 = 100<br>每个月应还本息 = 1000 + 100 = 1100<br>总还利息 = 12000 </em> 10% = 1200</p>
</blockquote>
<h2 id="等额本金"><a href="#等额本金" class="headerlink" title="等额本金"></a>等额本金</h2><p>等额本金是指在贷款期内每月偿还同等数额的本金和剩余贷款在该月所产生的利息。其特点就是，每期所还本金相等，利息逐月减少（根据剩余未还本金计算），总还款额逐月递减。等额本金是住房贷款的两种常见还款方式之一，其贷款计算公式如下：</p>
<p><strong>每月还款本息 = （贷款本金 / 还款月数）+ （贷款本金 - 已归还本金） * 月利率</strong></p>
<p><strong>总还款利息 = 贷款本金 * 月利率 * （还款月数 + 1）/ 2</strong></p>
<p>下面举个例子进行说明：</p>
<blockquote>
<p>等额本金：借款12000，借款期限12个月，月利率（ 10% / 12 ）<br>每个月应还本金 = 12000 / 12 = 1000<br>第1个月应还利息 = 12000 <em> 10% / 12 = 100<br>第2个月应还利息 = ( 12000 - 1000 ) </em> 10% / 12 = 91.67<br>…<br>第N个月应还利息 = ( 12000 - 1000 <em> ( N-1 ) ) </em> 10% / 12<br>…<br>第12个月应还利息 = ( 12000 - 1000 <em> 11 ) </em> 10% / 12 = 8.33<br>总还利息 = 12000 <em> 10% / 12 </em> ( 12 + 1 ) / 2 = 650</p>
</blockquote>
<h2 id="等额本息"><a href="#等额本息" class="headerlink" title="等额本息"></a>等额本息</h2><p>等额本息是指在贷款期内每月按相等的金额偿还贷款本息，其中利息逐月递减，本金逐月递增。其特点就是，由于每月的还款额相等，因此，在贷款初期每月的还款中，剔除按月结清的利息后，所还的贷款本金就较少；在贷款末期每月的还款中，剔除按月结清的利息后，所还的贷款本金就较多。等额本息是住房贷款的两种常见还款方式之一，其贷款计算公式如下，推导过程参考<a href="https://zhuanlan.zhihu.com/p/100008880" title="等额本息公式推导"><a href="https://zhuanlan.zhihu.com/p/100008880" title="等额本息公式推导">6</a></a>：</p>
<script type="math/tex; mode=display">
每月还款本息=贷款本金 \times  \frac{月利率 \times  (1+月利率)^{还款月数}}{(1+月利率)^{还款月数}-1}</script><p><strong>总还款利息 = 每月还款本息 * 还款月数 - 贷款本金</strong></p>
<p>下面举个例子进行说明：</p>
<blockquote>
<p>等额本息：借款12000，借款期限12个月，月利率（ 10% / 12 ）<br>每个月应还本息 = 1055<br>第1个月还款利息 = 12000 <em> 10% / 12 = 100<br>第1个月还款本金 = 1055 - 100 = 955<br>…<br>第12个月还款利息 = 9<br>第12个月还款本金 = 1046<br>总还利息 = 1055 </em> 12 - 12000 = 660</p>
</blockquote>
<h2 id="还款方式小结"><a href="#还款方式小结" class="headerlink" title="还款方式小结"></a>还款方式小结</h2><p>借本金12000元，利率为10%（月利千八，日利万三），不同的还款方式最后的不同的利息分布如下：</p>
<blockquote>
<p>随借随还：应还利息 1200<br>先息后本：应还利息 1200<br>等本等息：应还利息 1200<br>等额本金：应还利息 650<br>等额本息：应还利息 660</p>
</blockquote>
<img src="/%E9%87%91%E8%9E%8D/%E8%A7%A3%E6%9E%90%E5%80%9F%E8%B4%B7%E7%B1%BB%E4%BA%A7%E5%93%81%E5%A5%97%E8%B7%AF/image-20210306174037757.png" class="" title="image-20210306174037757">
<p>宏观来看，发现随借随还，先息后本和等本等息最后还的利息都是1200，而等额本金和等额本息只有650左右，相差巨大，为什么会这样？</p>
<p>我们再往深层看：</p>
<ul>
<li>随借随还和先息后本，借款人要长期占用借款本金，所以就会产生更高的利息，这是合理的。</li>
<li>等额本金和等额本息两种还款方式，借款人每个月还本金，利息会随着本金的减少而减少，所以这也是合理的。</li>
<li>等本等息，借款人每个月还本金，但是利息却并未减少，这种方式有利于出款人，不利于借款人</li>
</ul>
<p>所以我们在之后使用金融借贷类产品的时候，优先选择除等本等息外的其他还款方式，但是等本等息的借款模式其实有他存在的意义，之后在场景介绍中会讲到。</p>
<h1 id="不同还款方式的常见场景"><a href="#不同还款方式的常见场景" class="headerlink" title="不同还款方式的常见场景"></a>不同还款方式的常见场景</h1><ul>
<li><p>随接随还，先息后本，</p>
<ul>
<li>有利于借款人，充分利用了借款资金，没有每月现金流压力，但是最后总利息较高</li>
<li>出借人的风险非常高</li>
<li>面向优势客群，常见模式:<ul>
<li>亲人借款或者是优质客户借款</li>
</ul>
</li>
</ul>
</li>
</ul>
<ul>
<li><p>额本金，等额本息，两种模式利息会随着占用金额的变化而变化</p>
<ul>
<li><p>借款人虽然需要每月还款，但是利率是合理</p>
</li>
<li><p>出借人虽然每月有回款，但是总利息降低，出借人风险依然很高</p>
</li>
<li><p>面向优质客群，常见模式</p>
<ul>
<li>房贷，车贷等抵押贷款</li>
</ul>
</li>
</ul>
</li>
</ul>
<ul>
<li><p>等本等息</p>
<ul>
<li>借款人需要付出更多的利息，</li>
<li>收款人每月有回款，而且利息最大化收回，抗风险能力上升</li>
<li>可以降低放款标准，用多出来的利息冲抵风险，扩大借款客群范围</li>
<li>面向大众客群，常见场景：<ul>
<li>信用卡分期，京东白条，蚂蚁花呗</li>
</ul>
</li>
</ul>
</li>
</ul>
<p>每种借款模式都有其存在的合理性，利率低的贷款，问题是通过率低，而且贷款流程繁琐，利率高的贷款通过率高，流程简单。</p>
<p>当然可以发现，优质客群，收入高，有资产抵押，征信记录干净，没有逾期负面信息，没有大量的借款信息，在哪种方式下都是优先放款对象。</p>
<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1>]]></content>
      <categories>
        <category>金融</category>
      </categories>
  </entry>
  <entry>
    <title>Jupyter DashBoards 另类全家桶</title>
    <url>/Tech/Jupyter/Jupyter%E5%8F%A6%E7%B1%BB%E5%85%A8%E5%AE%B6%E6%A1%B6/</url>
    <content><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>今天看到一个非常好的功能 Jupyter DashBoards</p>
<p>基于Jupyter的仪表盘，非常Nice的功能，可以实现定制化，可视化与代码的分离</p>
<p>然后在这个基础上依次修正以及补充，基于Jupyter的一些误区和知识</p>
<p>本机的环境是 py3jupyter</p>
<p>感觉今天最大的收货是对学会看 docker 的配置文件 + 学会查找 github issue</p>
<a id="more"></a>
<h2 id="插件-nb-extensions"><a href="#插件-nb-extensions" class="headerlink" title="插件-nb extensions"></a>插件-nb extensions</h2><p>Git项目地址是，<a href="https://github.com/ipython-contrib/jupyter_contrib_nbextensions">nbextensions</a> 以及 <a href="https://github.com/Jupyter-contrib/jupyter_nbextensions_configurator">nbextensions_configurator</a>。前者是各类型有用的插件，后者是能够直接在Jupyter 上图形话调节界面的功能。</p>
<p>这里今天得到的收获主要是基于虚拟环境的一个配置问题</p>
<p>在官网上，安装完 nbextensions 之后，本质是将一<br>大堆插件放在下面目录下</p>
<p><code>/Users/&#123;user&#125;/Library/Jupyter/extensions</code></p>
<p>接下来进行插件激活和路径指定，官网上的提示使用的是<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">jupyter contrib nbextension install --user</span><br></pre></td></tr></table></figure><br>如果这么操作的话，是在用户目录 例如 <code>/home/user/.jupyter</code> 下面生成 nbextensions 的配置, 这会导致环境不隔离的情况。</p>
<p>正确的做法，切换到新的环境下的jupyter，执行</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">jupyter contrib nbextension install --sys-prefix</span><br></pre></td></tr></table></figure>
<p>这样就做到只影响该环境下的Jupyter，在某环境下的 /etc/jupyter 文件夹下产生对应的配置文件，nb的 和 notebook的都有，如果对于 notebook的配置有特殊的配置，可以写在这里，例如密码，token等。</p>
<p>如果要删除该内容，install 替换为 uninstall。</p>
<p>如果因为选择的是 users 会导致的问题是 <code>no module named nbextensions</code>，某些和root 环境不一致的环境找不到配置文件</p>
<h3 id="jupynter-版本的问题"><a href="#jupynter-版本的问题" class="headerlink" title="jupynter 版本的问题"></a>jupynter 版本的问题</h3><p>2017年06月04日，jupyter notebook 的版本已经升级到了5.0，但是通过 pip 安装的 nbextensions 的插件所写的代码，是4.x的程序，这个通过找 github issues, 发现作者已经在 master 分支上做了修改，nbextensions.py 这个文件，修改如下代码即可<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">try:</span><br><span class="line">    # notebook &gt; 4.2</span><br><span class="line">    from notebook.nbextensions import _get_nbextension_dir as get_nbext_dir</span><br><span class="line">except:</span><br><span class="line">    # notebook &lt;&#x3D; 4.2</span><br><span class="line">    from notebook.nbextensions import _get_nbext_dir as get_nbext_dir</span><br></pre></td></tr></table></figure></p>
<h2 id="Jupyter-DashBoard"><a href="#Jupyter-DashBoard" class="headerlink" title="Jupyter DashBoard"></a>Jupyter DashBoard</h2><h3 id="代码组成"><a href="#代码组成" class="headerlink" title="代码组成"></a>代码组成</h3><p>这是一个非常另类的套装, 由以下几个部分组成</p>
<p><a href="https://github.com/jupyter/dashboards">jupyter/dashboards</a>， notebook 插件将代码转化为可定制的 dashboard</p>
<p><a href="https://github.com/jupyter-incubator/dashboards_bundlers">dashboards_bundlers</a>，notebook 插件将定制好的dashboard 输出到 server端</p>
<p><a href="https://github.com/jupyter-incubator/dashboards_server">dashboards_server</a>，nodejs web框架，主要作用是与juypter server 通信展示只读功能的dashboard</p>
<p><a href="https://github.com/jupyter/kernel_gateway">kernel_gateway</a>，一个中间的类似于代理的web框架，用于和dashboard server 通信</p>
<p><a href="https://github.com/jupyter-incubator/dashboards_setup">dashboards_setup</a> ，一套基于docker的服务范例，讲解各个服务如何配置</p>
<p>架构流程如下图：<br><img src="/Tech/Jupyter/Jupyter%E5%8F%A6%E7%B1%BB%E5%85%A8%E5%AE%B6%E6%A1%B6/workflow.png" class="" title="流程图"></p>
<p>整完这一套，模型开发人员，两行代码就一套定制化的BI系统。这套系统搭建的时候最难的地方是连接</p>
<h3 id="dashboard-连接"><a href="#dashboard-连接" class="headerlink" title="dashboard 连接"></a>dashboard 连接</h3><ul>
<li>Jupyter Notebook</li>
</ul>
<p>这个是一端，启动的时候需要配置一下启动token和Server 的端口，方便和另一端加密验证。<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># token 的配置写在了配置文件里</span><br><span class="line"># 端口设置在环境变量中</span><br><span class="line">jupyter notebook</span><br></pre></td></tr></table></figure></p>
<ul>
<li>Dashboard Server</li>
</ul>
<p>用于HTML展示。有两个主要输入，一个是token作为加密验证的功能，一个是 gateway的地址 <a href="http://host:port">http://host:port</a> 即可<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 和 kernal 指定的ip 一致</span><br><span class="line"># token 设置在了环境变量里</span><br><span class="line">jupyter-dashboards-server --KERNEL_GATEWAY_URL&#x3D;http:&#x2F;&#x2F;&#123;kernal&#125;:8888</span><br></pre></td></tr></table></figure></p>
<ul>
<li>kernal gateway</li>
</ul>
<p>这个是在 dashboard_server 和 jupyter server 之间的一道桥梁。它和jupyter server的连接方式比较神奇，应该是通过jupyter 内核来通信，也就是二者需要在同一台机器上即可。</p>
<p>但是最合理的方式是，kernal gateway 和 jupyter 在同一目录下，统一端口上启动，否则将会有一些模板加载等小错，这里更神奇的是同一端口。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">jupyter kernelgateway --KernelGatewayApp.ip&#x3D;0.0.0.0</span><br></pre></td></tr></table></figure>
<ul>
<li>环境变量</li>
</ul>
<p>除了命令行直接传进去的配置，为了保持独立性，还需要在环境变量中增加两项的设置<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">export DASHBOARD_SERVER_URL&#x3D;http:&#x2F;&#x2F;&#123;dash_server_host&#125;:3000</span><br><span class="line">export KG_AUTH_TOKEN&#x3D;&#39;xxxxxxxxxxxxxxxxxxxx&#39; # 与Jupyter Notebook 的验证Token保持一致</span><br></pre></td></tr></table></figure></p>
<h3 id="环境隔离"><a href="#环境隔离" class="headerlink" title="环境隔离"></a>环境隔离</h3><p>在安装这些工具的时候，他们很多是 nbextension，所以启用的时候注意环境的隔离<br>例如 dashboard的启动方式  <code>jupyter dashboards quick-setup --sys-prefix</code><br>这样就做到与环境隔离了</p>
<h3 id="Docker当文档"><a href="#Docker当文档" class="headerlink" title="Docker当文档"></a>Docker当文档</h3><p>这一部分，其实我是感觉最精华的一部分。</p>
<p>首先我大概了解了一下 <a href="http://v.youku.com/v_show/id_XMjY5Mjk4MzY2OA==.html?from=s1.8-1-1.2&amp;spm=a2h0k.8191407.0.0">docker是什么</a></p>
<p>相当于 一台机器上的 一个 container 容器，虚拟机，跟本机系统环境无关，能在docker的镜像中跑成功的程序，一定能在其他机器上跑成功。</p>
<p>我自己按照 dashboards_setup的教程，在本地拉了三个镜像服务，然后启动，结果耗时两小时，发现可以跑成功</p>
<p>看是看懂了MakeFile的意义，我直接去看了这三个镜像分别干了什么，notebook 和 dserver 都和我想的一样</p>
<p>后来发现困扰我最久的kernal的启动方式，真实跪了<a href="https://github.com/jupyter-incubator/dashboards_setup/blob/master/dev_deploy/docker-compose.yml">总体配置</a></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">kernel_gateway:</span><br><span class="line">   build:</span><br><span class="line">     context: .</span><br><span class="line">     dockerfile: Dockerfile.kernel</span><br><span class="line">     args:</span><br><span class="line">       # pip versioning by default</span><br><span class="line">       # Replace with local tarballs like &#x2F;src&#x2F;jupyter_declarativewidgets-someversion.tar.gz</span><br><span class="line">       DECLWIDGETS_PKG: &#39;jupyter_declarativewidgets&#x3D;&#x3D;0.7.*&#39;</span><br><span class="line">       IPYWIDGETS_PKG: &#39;ipywidgets&#x3D;&#x3D;5.1.*&#39;</span><br><span class="line">   volumes_from:</span><br><span class="line">     - notebook</span><br><span class="line">   environment:</span><br><span class="line">     KG_ALLOW_ORIGIN: &#39;*&#39;</span><br></pre></td></tr></table></figure>
<p>得出的结论是 和 notebook 共享启动地址</p>
<p>在看<a href="https://github.com/jupyter-incubator/dashboards_setup/blob/master/dev_deploy/Dockerfile.kernel">具体配置</a><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># run kernel gateway, not notebook server</span><br><span class="line">CMD [&quot;jupyter&quot;, &quot;kernelgateway&quot;, &quot;--KernelGatewayApp.ip&#x3D;0.0.0.0&quot;]</span><br></pre></td></tr></table></figure><br>得出的结论是用默认端口号，共享端口</p>
<p>之后我再本地按照这种方式启动了，kernal 直接成功</p>
<p>这件事情让我得到了很大的启示，docker 真的很强大，这是最清楚的文档，能让机器看懂的文档，人更能看懂</p>
<h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><p>这个主要是参考，<a href="https://zhuanlan.zhihu.com/p/26739300?group_id=843868091631955968">「工具控」| TL001. 装扮你的Jupyter
</a>, 学了很厉害的几个小技巧</p>
<h3 id="magic"><a href="#magic" class="headerlink" title="magic"></a>magic</h3><p>只要在 notebook 执行 %% magic 就能看到介绍<br>例如</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">%timeit range(1000)</span><br><span class="line"></span><br><span class="line">%env PATH</span><br></pre></td></tr></table></figure>
<h3 id="ipython-kernal-预加载"><a href="#ipython-kernal-预加载" class="headerlink" title="ipython kernal 预加载"></a>ipython kernal 预加载</h3><p>创建配置文件，就能在内核中添加一些预加载的代码了<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ipython profile create</span><br></pre></td></tr></table></figure><br>自己添加的代码如下：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">c.InteractiveShellApp.exec_lines &#x3D; [</span><br><span class="line">        &quot;import pandas as pd&quot;,</span><br><span class="line">        &quot;import numpy as np&quot;,</span><br><span class="line">        &quot;import scipy.stats as spstats&quot;,</span><br><span class="line">        &quot;import scipy as sp&quot;,</span><br><span class="line">        &quot;import matplotlib.pyplot as plt&quot;,</span><br><span class="line">	    &quot;import matplotlib&quot;,</span><br><span class="line">        &quot;matplotlib.style.use(&#39;ggplot&#39;)&quot;,</span><br><span class="line">       &quot;%load_ext autoreload&quot;,</span><br><span class="line">616    &quot;%autoreload 2&quot;</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">c.IPKernelApp.matplotlib &#x3D; &#39;inline&#39;</span><br><span class="line"></span><br><span class="line">c.InlineBackend.figure_format &#x3D; &#39;retina&#39;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></p>
<h3 id="jupyter-notebook"><a href="#jupyter-notebook" class="headerlink" title="jupyter notebook"></a>jupyter notebook</h3><p>jupyter notebook 的配置文件，分为两种一种是全局的，一种是环境的，环境的上面讲过了，主要是在 etc 环境下，全局的就是按照官网的生成文件的方式就能搞定。</p>
<h3 id="jupyter-themes"><a href="#jupyter-themes" class="headerlink" title="jupyter-themes"></a><a href="https://github.com/dunovank/jupyter-themes">jupyter-themes</a></h3><p>这是一个很厉害的插件，能实现将Jupyter 设置各种 背景，但是绘图比较蛋疼，还是以白底jupyter 为主吧</p>
<p>这个知道怎么玩酷炫就好了<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 设置黑色背景</span><br><span class="line">jt -t chesterish</span><br><span class="line"># 恢复原样</span><br><span class="line">jt -r</span><br></pre></td></tr></table></figure></p>
]]></content>
      <categories>
        <category>技术/Jupyter</category>
      </categories>
      <tags>
        <tag>Jupyter</tag>
        <tag>架构</tag>
        <tag>Python</tag>
        <tag>随笔</tag>
      </tags>
  </entry>
</search>
